export default async function handler(req, res) {
  const binUrl = process.env.NEXT_PUBLIC_JSONBIN_URL;
  const apiKey = process.env.NEXT_PUBLIC_JSONBIN_KEY;

  if (!binUrl || !apiKey) {
    return res.status(500).json({ error: "‚ùå Missing JSONBin environment variables" });
  }

  try {
    // üß† ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡∏Å‡∏±‡∏ô error JSON.parse)
    let songs = [];
    try {
      const oldResp = await fetch(binUrl + "/latest", {
        headers: { "X-Master-Key": apiKey },
      });

      if (oldResp.ok) {
        const text = await oldResp.text(); // ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö text ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ß‡πà‡∏≤‡∏á
        if (text.trim()) {
          const parsed = JSON.parse(text);
          songs = Array.isArray(parsed.record)
            ? parsed.record
            : Array.isArray(parsed)
            ? parsed
            : [];
        }
      }
    } catch (err) {
      console.warn("‚ö†Ô∏è JSONBin ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", err.message);
    }

    // üßæ GET - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (req.method === "GET") {
      return res.status(200).json(songs);
    }

    // üíñ POST - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà
    if (req.method === "POST") {
      const { title, artist, url, message } = req.body;
      if (!title || !artist || !url || !message) {
        return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á" });
      }

      const newSong = { title, artist, url, message };
      songs.push(newSong);

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà JSONBin
      const saveResp = await fetch(binUrl, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          "X-Master-Key": apiKey,
        },
        body: JSON.stringify(songs),
      });

      const resultText = await saveResp.text();
      let result;
      try {
        result = JSON.parse(resultText);
      } catch {
        console.warn("‚ö†Ô∏è JSONBin ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô JSON:", resultText);
        result = {};
      }

      if (!saveResp.ok) {
        console.error("üî• JSONBin Save Error:", result);
        return res.status(saveResp.status).json({
          error: "‚ùå JSONBin Save Failed",
          detail: result,
        });
      }

      return res.status(200).json({ success: true, message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", data: result });
    }

    res.status(405).json({ message: "Method not allowed" });
  } catch (err) {
    console.error("üî• Server Error:", err);
    return res.status(500).json({
      error: "Server Error",
      detail: err.message,
    });
  }
}
